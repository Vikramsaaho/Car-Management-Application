Deploying the Backend (API)
Using Heroku:
Prepare the Backend for Deployment:

Ensure requirements.txt is up-to-date:

e
pip freeze > requirements.txt
Add a Procfile to specify how Heroku should run the application:

makefile

web: gunicorn <project_name>.wsgi
Replace <project_name> with your Django project name.

Configure allowed hosts in settings.py:


ALLOWED_HOSTS = ['your-app-name.herokuapp.com']
Set up static files for Heroku:


pip install whitenoise
Add WhiteNoise middleware in settings.py:


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    ...
]

STATIC_ROOT = BASE_DIR / 'staticfiles'
Add drf-yasg to your INSTALLED_APPS if not already done.

Push to Heroku:

Install the Heroku CLI:

curl https://cli-assets.heroku.com/install.sh | sh
Login to Heroku:

heroku login
Create a Heroku app:

heroku create your-app-name
Add PostgreSQL as the database (if needed):

heroku addons:create heroku-postgresql:hobby-dev
Push the app to Heroku:

git init
git add .
git commit -m "Initial commit"
heroku git:remote -a your-app-name
git push heroku main
Visit the Application:

Your application will be live at:
https://your-app-name.herokuapp.com

The API documentation will be accessible at:
https://your-app-name.herokuapp.com/api/docs/

Deploying the Frontend
Using Vercel:
Setup the Frontend:

Ensure the backend URL is correctly set in your React app (e.g., Axios base URL):
javascript

const API_BASE_URL = "https://your-app-name.herokuapp.com/api/";
Deploy to Vercel:

Install the Vercel CLI:

npm install -g vercel
Deploy your React app:

cd frontend
vercel
Follow the prompts to link or create a new project.
Visit the Frontend:

Your React app will be live at the Vercel URL provided (e.g., https://your-react-app.vercel.app).
Final Steps
Share the API deployment link (e.g., https://your-app-name.herokuapp.com/api/docs/) for API documentation.
Share the frontend deployment link (e.g., https://your-react-app.vercel.app) for accessing the application.
